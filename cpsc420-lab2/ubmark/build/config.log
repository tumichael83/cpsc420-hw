This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by ECE4750 Microbenchmark Suite configure ?, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  $ ../configure --host=maven host_alias=maven --no-create --no-recursion

## --------- ##
## Platform. ##
## --------- ##

hostname = viper.zoo.cs.yale.edu
uname -m = x86_64
uname -r = 6.0.18-200.fc36.x86_64
uname -s = Linux
uname -v = #1 SMP PREEMPT_DYNAMIC Sat Jan 7 17:08:48 UTC 2023

/usr/bin/uname -p = x86_64
/bin/uname -X     = unknown

/bin/arch              = x86_64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /usr/bin/
PATH: /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/bin/
PATH: /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/encap/maven-sys-xcc/bin/
PATH: /home/accts/mst45/.local/bin/
PATH: /home/accts/mst45/bin/
PATH: /usr/lib64/qt-3.3/bin/
PATH: /usr/condabin/
PATH: /usr/lib64/ccache/
PATH: /usr/local/bin/
PATH: /usr/bin/
PATH: /usr/local/sbin/
PATH: /usr/sbin/
PATH: /var/lib/snapd/snap/bin/


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2355: looking for aux files: install-sh config.guess config.sub
configure:2368:  trying ../scripts/
configure:2382:   ../scripts/install.sh found
configure:2397:   ../scripts/config.guess found
configure:2397:   ../scripts/config.sub found
configure:2517: checking build system type
configure:2532: result: x86_64-unknown-linux-gnu
configure:2552: checking host system type
configure:2566: result: mipsmavenel-ucb-elf
configure:2609: checking for maven-gcc
configure:2630: found /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/encap/maven-sys-xcc/bin/maven-gcc
configure:2641: result: maven-gcc
configure:3039: checking for C compiler version
configure:3048: maven-gcc --version >&5
maven-gcc (GCC) 4.4.1
Copyright (C) 2009 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3059: $? = 0
configure:3048: maven-gcc -v >&5
Using built-in specs.
Target: maven
Configured with: ../../src/configure --disable-option-checking --prefix=/home/ee475/local/encap/maven-sys-xcc --disable-werror --disable-nls --disable-libgomp --disable-libssp --disable-multilib --with-newlib --enable-languages=c,c++ --target=maven --enable-stow --cache-file=/dev/null --srcdir=../../src : (reconfigured) ../../src/configure --disable-option-checking --prefix=/home/ee475/local/encap/maven-sys-xcc --disable-werror --disable-nls --disable-libgomp --disable-libssp --disable-multilib --with-newlib --enable-languages=c,c++ --target=maven --cache-file=/dev/null --srcdir=../../src
Thread model: bthread
gcc version 4.4.1 (GCC) 
configure:3059: $? = 0
configure:3048: maven-gcc -V >&5
maven-gcc: '-V' option must have argument
configure:3059: $? = 1
configure:3048: maven-gcc -qversion >&5
maven-gcc: unrecognized option '-qversion'
maven-gcc: no input files
configure:3059: $? = 1
configure:3048: maven-gcc -version >&5
maven-gcc: unrecognized option '-version'
maven-gcc: no input files
configure:3059: $? = 1
configure:3079: checking whether the C compiler works
configure:3101: maven-gcc    conftest.c  >&5
configure:3105: $? = 0
configure:3155: result: yes
configure:3158: checking for C compiler default output file name
configure:3160: result: a.out
configure:3166: checking for suffix of executables
configure:3173: maven-gcc -o conftest    conftest.c  >&5
configure:3177: $? = 0
configure:3200: result: 
configure:3222: checking whether we are cross compiling
configure:3230: maven-gcc -o conftest    conftest.c  >&5
configure:3234: $? = 0
configure:3241: ./conftest
../configure: line 3243: ./conftest: cannot execute binary file: Exec format error
configure:3245: $? = 126
configure:3260: result: yes
configure:3265: checking for suffix of object files
configure:3288: maven-gcc -c   conftest.c >&5
configure:3292: $? = 0
configure:3314: result: o
configure:3318: checking whether the compiler supports GNU C
configure:3338: maven-gcc -c   conftest.c >&5
configure:3338: $? = 0
configure:3348: result: yes
configure:3359: checking whether maven-gcc accepts -g
configure:3380: maven-gcc -c -g  conftest.c >&5
configure:3380: $? = 0
configure:3424: result: yes
configure:3444: checking for maven-gcc option to enable C11 features
configure:3459: maven-gcc  -c -g -O2  conftest.c >&5
conftest.c:61:3: error: #error "Compiler does not advertise C99 conformance"
conftest.c:116: error: expected ';', ',' or ')' before 'text'
conftest.c:165:3: error: #error "Compiler does not advertise C11 conformance"
conftest.c: In function '_Alignas':
conftest.c:169: error: expected declaration specifiers before 'aligned_as_double'
conftest.c:170: error: expected declaration specifiers or '...' before numeric constant
conftest.c:170: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'no_special_alignment'
conftest.c:171: error: storage class specified for parameter 'aligned_as_int'
conftest.c:172: error: expected declaration specifiers or '...' before numeric constant
conftest.c:172: error: expected '=', ',', ';', 'asm' or '__attribute__' before '_Alignas'
conftest.c:177: error: expected expression before 'int'
conftest.c:177: error: enumerator value for 'int_alignment' is not an integer constant
conftest.c:178: error: expected expression before 'int'
conftest.c:178: error: enumerator value for 'int_array_alignment' is not an integer constant
conftest.c:179: error: expected expression before 'char'
conftest.c:180: error: enumerator value for 'char_alignment' is not an integer constant
conftest.c:175: warning: empty declaration
conftest.c:181: error: expected declaration specifiers before '_Static_assert'
conftest.c:184: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'does_not_return'
conftest.c:190: error: expected specifier-qualifier-list before '_Static_assert'
conftest.c:187: warning: empty declaration
conftest.c:197: error: parameter 'utf8_literal' is initialized
conftest.c:197: error: 'syntax' undeclared (first use in this function)
conftest.c:197: error: (Each undeclared identifier is reported only once
conftest.c:197: error: for each function it appears in.)
conftest.c:197: error: expected ',' or ';' before 'error'
conftest.c:200: error: storage class specified for parameter 'long_ptr'
conftest.c:201: error: storage class specified for parameter 'long_ptr'
conftest.c:201: error: redefinition of parameter 'long_ptr'
conftest.c:200: note: previous definition of 'long_ptr' was here
conftest.c:202: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'long_ptr'
conftest.c:217: error: expected '=', ',', ';', 'asm' or '__attribute__' before '{' token
conftest.c:169: error: old-style parameter declarations in prototyped function definition
conftest.c:169: error: parameter name omitted
conftest.c:269: error: expected '{' at end of input
configure:3459: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| // Does the compiler advertise C11 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L
| # error "Compiler does not advertise C11 conformance"
| #endif
| 
| // Check _Alignas.
| char _Alignas (double) aligned_as_double;
| char _Alignas (0) no_special_alignment;
| extern char aligned_as_int;
| char _Alignas (0) _Alignas (int) aligned_as_int;
| 
| // Check _Alignof.
| enum
| {
|   int_alignment = _Alignof (int),
|   int_array_alignment = _Alignof (int[100]),
|   char_alignment = _Alignof (char)
| };
| _Static_assert (0 < -_Alignof (int), "_Alignof is signed");
| 
| // Check _Noreturn.
| int _Noreturn does_not_return (void) { for (;;) continue; }
| 
| // Check _Static_assert.
| struct test_static_assert
| {
|   int x;
|   _Static_assert (sizeof (int) <= sizeof (long int),
|                   "_Static_assert does not work in struct");
|   long int y;
| };
| 
| // Check UTF-8 literals.
| #define u8 syntax error!
| char const utf8_literal[] = u8"happens to be ASCII" "another string";
| 
| // Check duplicate typedefs.
| typedef long *long_ptr;
| typedef long int *long_ptr;
| typedef long_ptr long_ptr;
| 
| // Anonymous structures and unions -- taken from C11 6.7.2.1 Example 1.
| struct anonymous
| {
|   union {
|     struct { int i; int j; };
|     struct { int k; long int l; } w;
|   };
|   int m;
| } v1;
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   
|   _Static_assert ((offsetof (struct anonymous, i)
| 		   == offsetof (struct anonymous, w.k)),
| 		  "Anonymous union alignment botch");
|   v1.i = 2;
|   v1.w.k = 5;
|   ok |= v1.i != 5;
| 
|   return ok;
| }
| 
configure:3459: maven-gcc -std=gnu11 -c -g -O2  conftest.c >&5
cc1: error: unrecognized command line option "-std=gnu11"
configure:3459: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| // Does the compiler advertise C11 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L
| # error "Compiler does not advertise C11 conformance"
| #endif
| 
| // Check _Alignas.
| char _Alignas (double) aligned_as_double;
| char _Alignas (0) no_special_alignment;
| extern char aligned_as_int;
| char _Alignas (0) _Alignas (int) aligned_as_int;
| 
| // Check _Alignof.
| enum
| {
|   int_alignment = _Alignof (int),
|   int_array_alignment = _Alignof (int[100]),
|   char_alignment = _Alignof (char)
| };
| _Static_assert (0 < -_Alignof (int), "_Alignof is signed");
| 
| // Check _Noreturn.
| int _Noreturn does_not_return (void) { for (;;) continue; }
| 
| // Check _Static_assert.
| struct test_static_assert
| {
|   int x;
|   _Static_assert (sizeof (int) <= sizeof (long int),
|                   "_Static_assert does not work in struct");
|   long int y;
| };
| 
| // Check UTF-8 literals.
| #define u8 syntax error!
| char const utf8_literal[] = u8"happens to be ASCII" "another string";
| 
| // Check duplicate typedefs.
| typedef long *long_ptr;
| typedef long int *long_ptr;
| typedef long_ptr long_ptr;
| 
| // Anonymous structures and unions -- taken from C11 6.7.2.1 Example 1.
| struct anonymous
| {
|   union {
|     struct { int i; int j; };
|     struct { int k; long int l; } w;
|   };
|   int m;
| } v1;
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   
|   _Static_assert ((offsetof (struct anonymous, i)
| 		   == offsetof (struct anonymous, w.k)),
| 		  "Anonymous union alignment botch");
|   v1.i = 2;
|   v1.w.k = 5;
|   ok |= v1.i != 5;
| 
|   return ok;
| }
| 
configure:3472: result: unsupported
configure:3490: checking for maven-gcc option to enable C99 features
configure:3505: maven-gcc  -c -g -O2  conftest.c >&5
conftest.c:61:3: error: #error "Compiler does not advertise C99 conformance"
conftest.c:116: error: expected ';', ',' or ')' before 'text'
conftest.c: In function 'main':
conftest.c:178: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'newvar'
conftest.c:178: error: 'newvar' undeclared (first use in this function)
conftest.c:178: error: (Each undeclared identifier is reported only once
conftest.c:178: error: for each function it appears in.)
conftest.c:188: error: 'for' loop initial declarations are only allowed in C99 mode
conftest.c:188: note: use option -std=c99 or -std=gnu99 to compile your code
configure:3505: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| /* Does the compiler advertise C89 conformance?
|    Do not test the value of __STDC__, because some compilers set it to 0
|    while being otherwise adequately conformant. */
| #if !defined __STDC__
| # error "Compiler does not advertise C89 conformance"
| #endif
| 
| #include <stddef.h>
| #include <stdarg.h>
| struct stat;
| /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
| struct buf { int x; };
| struct buf * (*rcsopen) (struct buf *, struct stat *, int);
| static char *e (p, i)
|      char **p;
|      int i;
| {
|   return p[i];
| }
| static char *f (char * (*g) (char **, int), char **p, ...)
| {
|   char *s;
|   va_list v;
|   va_start (v,p);
|   s = g (p, va_arg (v,int));
|   va_end (v);
|   return s;
| }
| 
| /* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
|    function prototypes and stuff, but not \xHH hex character constants.
|    These do not provoke an error unfortunately, instead are silently treated
|    as an "x".  The following induces an error, until -std is added to get
|    proper ANSI mode.  Curiously \x00 != x always comes out true, for an
|    array size at least.  It is necessary to write \x00 == 0 to get something
|    that is true only with -std.  */
| int osf4_cc_array ['\x00' == 0 ? 1 : -1];
| 
| /* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
|    inside strings and character constants.  */
| #define FOO(x) 'x'
| int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
| 
| int test (int i, double x);
| struct s1 {int (*f) (int a);};
| struct s2 {int (*f) (double a);};
| int pairnames (int, char **, int *(*)(struct buf *, struct stat *, int),
|                int, int);
| 
| // Does the compiler advertise C99 conformance?
| #if !defined __STDC_VERSION__ || __STDC_VERSION__ < 199901L
| # error "Compiler does not advertise C99 conformance"
| #endif
| 
| #include <stdbool.h>
| extern int puts (const char *);
| extern int printf (const char *, ...);
| extern int dprintf (int, const char *, ...);
| extern void *malloc (size_t);
| 
| // Check varargs macros.  These examples are taken from C99 6.10.3.5.
| // dprintf is used instead of fprintf to avoid needing to declare
| // FILE and stderr.
| #define debug(...) dprintf (2, __VA_ARGS__)
| #define showlist(...) puts (#__VA_ARGS__)
| #define report(test,...) ((test) ? puts (#test) : printf (__VA_ARGS__))
| static void
| test_varargs_macros (void)
| {
|   int x = 1234;
|   int y = 5678;
|   debug ("Flag");
|   debug ("X = %d\n", x);
|   showlist (The first, second, and third items.);
|   report (x>y, "x is %d but y is %d", x, y);
| }
| 
| // Check long long types.
| #define BIG64 18446744073709551615ull
| #define BIG32 4294967295ul
| #define BIG_OK (BIG64 / BIG32 == 4294967297ull && BIG64 % BIG32 == 0)
| #if !BIG_OK
|   #error "your preprocessor is broken"
| #endif
| #if BIG_OK
| #else
|   #error "your preprocessor is broken"
| #endif
| static long long int bignum = -9223372036854775807LL;
| static unsigned long long int ubignum = BIG64;
| 
| struct incomplete_array
| {
|   int datasize;
|   double data[];
| };
| 
| struct named_init {
|   int number;
|   const wchar_t *name;
|   double average;
| };
| 
| typedef const char *ccp;
| 
| static inline int
| test_restrict (ccp restrict text)
| {
|   // See if C++-style comments work.
|   // Iterate through items via the restricted pointer.
|   // Also check for declarations in for loops.
|   for (unsigned int i = 0; *(text+i) != '\0'; ++i)
|     continue;
|   return 0;
| }
| 
| // Check varargs and va_copy.
| static bool
| test_varargs (const char *format, ...)
| {
|   va_list args;
|   va_start (args, format);
|   va_list args_copy;
|   va_copy (args_copy, args);
| 
|   const char *str = "";
|   int number = 0;
|   float fnumber = 0;
| 
|   while (*format)
|     {
|       switch (*format++)
| 	{
| 	case 's': // string
| 	  str = va_arg (args_copy, const char *);
| 	  break;
| 	case 'd': // int
| 	  number = va_arg (args_copy, int);
| 	  break;
| 	case 'f': // float
| 	  fnumber = va_arg (args_copy, double);
| 	  break;
| 	default:
| 	  break;
| 	}
|     }
|   va_end (args_copy);
|   va_end (args);
| 
|   return *str && number && fnumber;
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
| ok |= (argc == 0 || f (e, argv, 0) != argv[0] || f (e, argv, 1) != argv[1]);
| 
|   
|   // Check bool.
|   _Bool success = false;
|   success |= (argc != 0);
| 
|   // Check restrict.
|   if (test_restrict ("String literal") == 0)
|     success = true;
|   char *restrict newvar = "Another string";
| 
|   // Check varargs.
|   success &= test_varargs ("s, d' f .", "string", 65, 34.234);
|   test_varargs_macros ();
| 
|   // Check flexible array members.
|   struct incomplete_array *ia =
|     malloc (sizeof (struct incomplete_array) + (sizeof (double) * 10));
|   ia->datasize = 10;
|   for (int i = 0; i < ia->datasize; ++i)
|     ia->data[i] = i * 1.234;
| 
|   // Check named initializers.
|   struct named_init ni = {
|     .number = 34,
|     .name = L"Test wide string",
|     .average = 543.34343,
|   };
| 
|   ni.number = 58;
| 
|   int dynamic_array[ni.number];
|   dynamic_array[0] = argv[0][0];
|   dynamic_array[ni.number - 1] = 543;
| 
|   // work around unused variable warnings
|   ok |= (!success || bignum == 0LL || ubignum == 0uLL || newvar[0] == 'x'
| 	 || dynamic_array[ni.number - 1] != 543);
| 
|   return ok;
| }
| 
configure:3505: maven-gcc -std=gnu99 -c -g -O2  conftest.c >&5
configure:3505: $? = 0
configure:3526: result: -std=gnu99
configure:3611: checking for maven-g++
configure:3632: found /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/encap/maven-sys-xcc/bin/maven-g++
configure:3643: result: maven-g++
configure:3719: checking for C++ compiler version
configure:3728: maven-g++ --version >&5
maven-g++ (GCC) 4.4.1
Copyright (C) 2009 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3739: $? = 0
configure:3728: maven-g++ -v >&5
Using built-in specs.
Target: maven
Configured with: ../../src/configure --disable-option-checking --prefix=/home/ee475/local/encap/maven-sys-xcc --disable-werror --disable-nls --disable-libgomp --disable-libssp --disable-multilib --with-newlib --enable-languages=c,c++ --target=maven --enable-stow --cache-file=/dev/null --srcdir=../../src : (reconfigured) ../../src/configure --disable-option-checking --prefix=/home/ee475/local/encap/maven-sys-xcc --disable-werror --disable-nls --disable-libgomp --disable-libssp --disable-multilib --with-newlib --enable-languages=c,c++ --target=maven --cache-file=/dev/null --srcdir=../../src
Thread model: bthread
gcc version 4.4.1 (GCC) 
configure:3739: $? = 0
configure:3728: maven-g++ -V >&5
maven-g++: '-V' option must have argument
configure:3739: $? = 1
configure:3728: maven-g++ -qversion >&5
maven-g++: unrecognized option '-qversion'
maven-g++: no input files
configure:3739: $? = 1
configure:3743: checking whether the compiler supports GNU C++
configure:3763: maven-g++ -c   conftest.cpp >&5
configure:3763: $? = 0
configure:3773: result: yes
configure:3784: checking whether maven-g++ accepts -g
configure:3805: maven-g++ -c -g  conftest.cpp >&5
configure:3805: $? = 0
configure:3849: result: yes
configure:3869: checking for maven-g++ option to enable C++11 features
configure:3884: maven-g++  -c -g -O2  conftest.cpp >&5
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
conftest.cpp:55:3: error: #error "Compiler does not advertise C++11 conformance"
conftest.cpp:60: error: expected constructor, destructor, or type conversion before 'int'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:72: error: type 'cxx11test::delegate' is not a direct base of 'cxx11test::delegate'
conftest.cpp: At global scope:
conftest.cpp:83: error: expected ';' before 'override'
conftest.cpp:84: error: expected ';' before '}' token
conftest.cpp:90: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:91: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:92: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:104: error: ISO C++ forbids declaration of 'sum' with no type
conftest.cpp:104: error: top-level declaration of 'sum' specifies 'auto'
conftest.cpp:104: error: 'sum' function with late return type not declared with 'auto' type specifier
conftest.cpp:108: warning: variadic templates only available with -std=c++0x or -std=gnu++0x
conftest.cpp:108: warning: variadic templates only available with -std=c++0x or -std=gnu++0x
conftest.cpp:108: error: ISO C++ forbids declaration of 'sum' with no type
conftest.cpp:108: error: top-level declaration of 'sum' specifies 'auto'
conftest.cpp:108: error: 'sum' function with late return type not declared with 'auto' type specifier
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:132: error: ISO C++ forbids declaration of 'a1' with no type
conftest.cpp:133: error: ISO C++ forbids declaration of 'a2' with no type
conftest.cpp:134: error: ISO C++ forbids declaration of 'a3' with no type
conftest.cpp:134: error: invalid conversion from 'const char*' to 'int'
conftest.cpp:137: error: ISO C++ forbids declaration of 'i' with no type
conftest.cpp:137: error: invalid type argument of 'unary *'
conftest.cpp:137: error: invalid type argument of 'unary *'
conftest.cpp:139: error: 'decltype' was not declared in this scope
conftest.cpp:139: error: expected ';' before 'a4'
conftest.cpp:143: error: 'get_val' is not a member of 'cxx11test'
conftest.cpp:153: error: expected initializer before ':' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ')' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:158: error: expected primary-expression before '[' token
conftest.cpp:158: error: expected primary-expression before ']' token
conftest.cpp:158: error: expected primary-expression before 'int'
conftest.cpp:160: error: expected primary-expression before '[' token
conftest.cpp:160: error: expected primary-expression before ']' token
conftest.cpp:160: error: expected primary-expression before 'double'
conftest.cpp:162: error: expected primary-expression before '[' token
conftest.cpp:162: error: expected primary-expression before '=' token
conftest.cpp:162: error: expected primary-expression before ']' token
conftest.cpp:162: error: expected primary-expression before 'double'
conftest.cpp:167: error: 'cxx11test::sum' has not been declared
conftest.cpp:168: error: ISO C++ forbids declaration of 'a' with no type
conftest.cpp:168: error: 'sum' was not declared in this scope
conftest.cpp:169: error: ISO C++ forbids declaration of 'b' with no type
conftest.cpp:170: error: ISO C++ forbids declaration of 'c' with no type
conftest.cpp:184: error: 'nullptr' was not declared in this scope
conftest.cpp:188: error: '>>' should be '> >' within a nested template argument list
conftest.cpp:188: error: '<::' cannot begin a template-argument list
conftest.cpp:188: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:188: note: (if you use '-fpermissive' G++ will accept your code)
conftest.cpp:192: error: 'u8' was not declared in this scope
conftest.cpp:192: error: expected ',' or ';' before string constant
conftest.cpp:193: error: 'char16_t' was not declared in this scope
conftest.cpp:193: error: expected ';' before 'const'
conftest.cpp:194: error: 'char32_t' was not declared in this scope
conftest.cpp:194: error: expected ';' before 'const'
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3884: maven-g++ -std=gnu++11 -c -g -O2  conftest.cpp >&5
cc1plus: error: unrecognized command line option "-std=gnu++11"
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3884: maven-g++ -std=gnu++0x -c -g -O2  conftest.cpp >&5
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
conftest.cpp:55:3: error: #error "Compiler does not advertise C++11 conformance"
conftest.cpp:60: error: expected constructor, destructor, or type conversion before 'int'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:72: error: type 'cxx11test::delegate' is not a direct base of 'cxx11test::delegate'
conftest.cpp: At global scope:
conftest.cpp:83: error: expected ';' before 'override'
conftest.cpp:84: error: expected ';' before '}' token
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:143: error: 'get_val' is not a member of 'cxx11test'
conftest.cpp:153: error: expected initializer before ':' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ')' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:158: error: expected primary-expression before '[' token
conftest.cpp:158: error: expected primary-expression before ']' token
conftest.cpp:158: error: expected primary-expression before 'int'
conftest.cpp:160: error: expected primary-expression before '[' token
conftest.cpp:160: error: expected primary-expression before ']' token
conftest.cpp:160: error: expected primary-expression before 'double'
conftest.cpp:162: error: expected primary-expression before '[' token
conftest.cpp:162: error: expected primary-expression before '=' token
conftest.cpp:162: error: expected primary-expression before ']' token
conftest.cpp:162: error: expected primary-expression before 'double'
conftest.cpp:184: error: 'nullptr' was not declared in this scope
conftest.cpp:188: error: '<::' cannot begin a template-argument list
conftest.cpp:188: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:188: note: (if you use '-fpermissive' G++ will accept your code)
conftest.cpp:192: error: 'u8' was not declared in this scope
conftest.cpp:192: error: expected ',' or ';' before string constant
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3884: maven-g++ -std=c++11 -c -g -O2  conftest.cpp >&5
cc1plus: error: unrecognized command line option "-std=c++11"
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3884: maven-g++ -std=c++0x -c -g -O2  conftest.cpp >&5
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
conftest.cpp:55:3: error: #error "Compiler does not advertise C++11 conformance"
conftest.cpp:60: error: expected constructor, destructor, or type conversion before 'int'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:72: error: type 'cxx11test::delegate' is not a direct base of 'cxx11test::delegate'
conftest.cpp: At global scope:
conftest.cpp:83: error: expected ';' before 'override'
conftest.cpp:84: error: expected ';' before '}' token
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:143: error: 'get_val' is not a member of 'cxx11test'
conftest.cpp:153: error: expected initializer before ':' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ')' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:158: error: expected primary-expression before '[' token
conftest.cpp:158: error: expected primary-expression before ']' token
conftest.cpp:158: error: expected primary-expression before 'int'
conftest.cpp:160: error: expected primary-expression before '[' token
conftest.cpp:160: error: expected primary-expression before ']' token
conftest.cpp:160: error: expected primary-expression before 'double'
conftest.cpp:162: error: expected primary-expression before '[' token
conftest.cpp:162: error: expected primary-expression before '=' token
conftest.cpp:162: error: expected primary-expression before ']' token
conftest.cpp:162: error: expected primary-expression before 'double'
conftest.cpp:184: error: 'nullptr' was not declared in this scope
conftest.cpp:188: error: '<::' cannot begin a template-argument list
conftest.cpp:188: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:188: note: (if you use '-fpermissive' G++ will accept your code)
conftest.cpp:192: error: 'u8' was not declared in this scope
conftest.cpp:192: error: expected ',' or ';' before string constant
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3884: maven-g++ -qlanglvl=extended0x -c -g -O2  conftest.cpp >&5
maven-g++: unrecognized option '-qlanglvl=extended0x'
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
conftest.cpp:55:3: error: #error "Compiler does not advertise C++11 conformance"
conftest.cpp:60: error: expected constructor, destructor, or type conversion before 'int'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:72: error: type 'cxx11test::delegate' is not a direct base of 'cxx11test::delegate'
conftest.cpp: At global scope:
conftest.cpp:83: error: expected ';' before 'override'
conftest.cpp:84: error: expected ';' before '}' token
conftest.cpp:90: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:91: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:92: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:104: error: ISO C++ forbids declaration of 'sum' with no type
conftest.cpp:104: error: top-level declaration of 'sum' specifies 'auto'
conftest.cpp:104: error: 'sum' function with late return type not declared with 'auto' type specifier
conftest.cpp:108: warning: variadic templates only available with -std=c++0x or -std=gnu++0x
conftest.cpp:108: warning: variadic templates only available with -std=c++0x or -std=gnu++0x
conftest.cpp:108: error: ISO C++ forbids declaration of 'sum' with no type
conftest.cpp:108: error: top-level declaration of 'sum' specifies 'auto'
conftest.cpp:108: error: 'sum' function with late return type not declared with 'auto' type specifier
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:132: error: ISO C++ forbids declaration of 'a1' with no type
conftest.cpp:133: error: ISO C++ forbids declaration of 'a2' with no type
conftest.cpp:134: error: ISO C++ forbids declaration of 'a3' with no type
conftest.cpp:134: error: invalid conversion from 'const char*' to 'int'
conftest.cpp:137: error: ISO C++ forbids declaration of 'i' with no type
conftest.cpp:137: error: invalid type argument of 'unary *'
conftest.cpp:137: error: invalid type argument of 'unary *'
conftest.cpp:139: error: 'decltype' was not declared in this scope
conftest.cpp:139: error: expected ';' before 'a4'
conftest.cpp:143: error: 'get_val' is not a member of 'cxx11test'
conftest.cpp:153: error: expected initializer before ':' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ')' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:158: error: expected primary-expression before '[' token
conftest.cpp:158: error: expected primary-expression before ']' token
conftest.cpp:158: error: expected primary-expression before 'int'
conftest.cpp:160: error: expected primary-expression before '[' token
conftest.cpp:160: error: expected primary-expression before ']' token
conftest.cpp:160: error: expected primary-expression before 'double'
conftest.cpp:162: error: expected primary-expression before '[' token
conftest.cpp:162: error: expected primary-expression before '=' token
conftest.cpp:162: error: expected primary-expression before ']' token
conftest.cpp:162: error: expected primary-expression before 'double'
conftest.cpp:167: error: 'cxx11test::sum' has not been declared
conftest.cpp:168: error: ISO C++ forbids declaration of 'a' with no type
conftest.cpp:168: error: 'sum' was not declared in this scope
conftest.cpp:169: error: ISO C++ forbids declaration of 'b' with no type
conftest.cpp:170: error: ISO C++ forbids declaration of 'c' with no type
conftest.cpp:184: error: 'nullptr' was not declared in this scope
conftest.cpp:188: error: '>>' should be '> >' within a nested template argument list
conftest.cpp:188: error: '<::' cannot begin a template-argument list
conftest.cpp:188: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:188: note: (if you use '-fpermissive' G++ will accept your code)
conftest.cpp:192: error: 'u8' was not declared in this scope
conftest.cpp:192: error: expected ',' or ';' before string constant
conftest.cpp:193: error: 'char16_t' was not declared in this scope
conftest.cpp:193: error: expected ';' before 'const'
conftest.cpp:194: error: 'char32_t' was not declared in this scope
conftest.cpp:194: error: expected ';' before 'const'
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3884: maven-g++ -AA -c -g -O2  conftest.cpp >&5
<command-line>: error: missing '(' after predicate
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
conftest.cpp:55:3: error: #error "Compiler does not advertise C++11 conformance"
conftest.cpp:60: error: expected constructor, destructor, or type conversion before 'int'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:72: error: type 'cxx11test::delegate' is not a direct base of 'cxx11test::delegate'
conftest.cpp: At global scope:
conftest.cpp:83: error: expected ';' before 'override'
conftest.cpp:84: error: expected ';' before '}' token
conftest.cpp:90: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:91: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:92: warning: defaulted and deleted functions only available with -std=c++0x or -std=gnu++0x
conftest.cpp:104: error: ISO C++ forbids declaration of 'sum' with no type
conftest.cpp:104: error: top-level declaration of 'sum' specifies 'auto'
conftest.cpp:104: error: 'sum' function with late return type not declared with 'auto' type specifier
conftest.cpp:108: warning: variadic templates only available with -std=c++0x or -std=gnu++0x
conftest.cpp:108: warning: variadic templates only available with -std=c++0x or -std=gnu++0x
conftest.cpp:108: error: ISO C++ forbids declaration of 'sum' with no type
conftest.cpp:108: error: top-level declaration of 'sum' specifies 'auto'
conftest.cpp:108: error: 'sum' function with late return type not declared with 'auto' type specifier
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:132: error: ISO C++ forbids declaration of 'a1' with no type
conftest.cpp:133: error: ISO C++ forbids declaration of 'a2' with no type
conftest.cpp:134: error: ISO C++ forbids declaration of 'a3' with no type
conftest.cpp:134: error: invalid conversion from 'const char*' to 'int'
conftest.cpp:137: error: ISO C++ forbids declaration of 'i' with no type
conftest.cpp:137: error: invalid type argument of 'unary *'
conftest.cpp:137: error: invalid type argument of 'unary *'
conftest.cpp:139: error: 'decltype' was not declared in this scope
conftest.cpp:139: error: expected ';' before 'a4'
conftest.cpp:143: error: 'get_val' is not a member of 'cxx11test'
conftest.cpp:153: error: expected initializer before ':' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ')' before '}' token
conftest.cpp:154: error: expected primary-expression before '}' token
conftest.cpp:154: error: expected ';' before '}' token
conftest.cpp:158: error: expected primary-expression before '[' token
conftest.cpp:158: error: expected primary-expression before ']' token
conftest.cpp:158: error: expected primary-expression before 'int'
conftest.cpp:160: error: expected primary-expression before '[' token
conftest.cpp:160: error: expected primary-expression before ']' token
conftest.cpp:160: error: expected primary-expression before 'double'
conftest.cpp:162: error: expected primary-expression before '[' token
conftest.cpp:162: error: expected primary-expression before '=' token
conftest.cpp:162: error: expected primary-expression before ']' token
conftest.cpp:162: error: expected primary-expression before 'double'
conftest.cpp:167: error: 'cxx11test::sum' has not been declared
conftest.cpp:168: error: ISO C++ forbids declaration of 'a' with no type
conftest.cpp:168: error: 'sum' was not declared in this scope
conftest.cpp:169: error: ISO C++ forbids declaration of 'b' with no type
conftest.cpp:170: error: ISO C++ forbids declaration of 'c' with no type
conftest.cpp:184: error: 'nullptr' was not declared in this scope
conftest.cpp:188: error: '>>' should be '> >' within a nested template argument list
conftest.cpp:188: error: '<::' cannot begin a template-argument list
conftest.cpp:188: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:188: note: (if you use '-fpermissive' G++ will accept your code)
conftest.cpp:192: error: 'u8' was not declared in this scope
conftest.cpp:192: error: expected ',' or ';' before string constant
conftest.cpp:193: error: 'char16_t' was not declared in this scope
conftest.cpp:193: error: expected ';' before 'const'
conftest.cpp:194: error: 'char32_t' was not declared in this scope
conftest.cpp:194: error: expected ';' before 'const'
configure:3884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3897: result: unsupported
configure:3915: checking for maven-g++ option to enable C++98 features
configure:3930: maven-g++  -c -g -O2  conftest.cpp >&5
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
configure:3930: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:3930: maven-g++ -std=gnu++98 -c -g -O2  conftest.cpp >&5
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
configure:3930: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:3930: maven-g++ -std=c++98 -c -g -O2  conftest.cpp >&5
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
configure:3930: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:3930: maven-g++ -qlanglvl=extended -c -g -O2  conftest.cpp >&5
maven-g++: unrecognized option '-qlanglvl=extended'
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
configure:3930: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:3930: maven-g++ -AA -c -g -O2  conftest.cpp >&5
<command-line>: error: missing '(' after predicate
conftest.cpp:12:3: error: #error "Compiler does not advertise C++98 conformance"
configure:3930: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
| #define PACKAGE_TARNAME "ubmark"
| #define PACKAGE_VERSION "?"
| #define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
| #define PACKAGE_BUGREPORT "Ji Kim"
| #define PACKAGE_URL ""
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   return ok;
| }
| 
configure:3943: result: unsupported
configure:3974: checking for maven-ar
configure:3995: found /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/encap/maven-sys-xcc/bin/maven-ar
configure:4006: result: maven-ar
configure:4076: checking for maven-ranlib
configure:4097: found /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/encap/maven-sys-xcc/bin/maven-ranlib
configure:4108: result: maven-ranlib
configure:4224: checking for a BSD-compatible install
configure:4297: result: /usr/bin/install -c
configure:4452: checking for maven-isa-run
configure:4473: found /home/accts/mst45/cs420/cpsc420-hw/cpsc420-lab2/toolchain/local/bin/maven-isa-run
configure:4484: result: maven-isa-run
configure:4802: configuring internal subproject ubmark
configure:4947: creating ./config.status

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=x86_64-unknown-linux-gnu
ac_cv_c_compiler_gnu=yes
ac_cv_cxx_compiler_gnu=yes
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CXXFLAGS_set=
ac_cv_env_CXXFLAGS_value=
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_STOW_PREFIX_set=
ac_cv_env_STOW_PREFIX_value=
ac_cv_env_STOW_ROOT_set=
ac_cv_env_STOW_ROOT_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=set
ac_cv_env_host_alias_value=maven
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_host=mipsmavenel-ucb-elf
ac_cv_objext=o
ac_cv_path_install='/usr/bin/install -c'
ac_cv_prog_AR=maven-ar
ac_cv_prog_CC=maven-gcc
ac_cv_prog_CXX=maven-g++
ac_cv_prog_RANLIB=maven-ranlib
ac_cv_prog_RUN=maven-isa-run
ac_cv_prog_cc_c11=no
ac_cv_prog_cc_c99=-std=gnu99
ac_cv_prog_cc_g=yes
ac_cv_prog_cc_stdc=-std=gnu99
ac_cv_prog_cxx_cxx11=no
ac_cv_prog_cxx_cxx98=no
ac_cv_prog_cxx_g=yes

## ----------------- ##
## Output variables. ##
## ----------------- ##

AR='maven-ar'
CC='maven-gcc -std=gnu99'
CFLAGS='-Wall -g -O3'
CPPFLAGS=''
CXX='maven-g++'
CXXFLAGS='-Wall -g -O3 -D_MIPS_ARCH_LLFU'
DEFS='-DHAVE_CONFIG_H'
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EXEEXT=''
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
LDFLAGS=''
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
OBJEXT='o'
PACKAGE_BUGREPORT='Ji Kim'
PACKAGE_NAME='ECE4750 Microbenchmark Suite'
PACKAGE_STRING='ECE4750 Microbenchmark Suite ?'
PACKAGE_TARNAME='ubmark'
PACKAGE_URL=''
PACKAGE_VERSION='?'
PATH_SEPARATOR=':'
RANLIB='maven-ranlib'
RUN='maven-isa-run'
RUNFLAGS=''
SHELL='/bin/sh'
STOW_PREFIX=''
STOW_ROOT=''
ac_ct_CC=''
ac_ct_CXX=''
ac_ct_RUN=''
bindir='${exec_prefix}/bin'
build='x86_64-unknown-linux-gnu'
build_alias=''
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='unknown'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
enable_stow='no'
exec_prefix='${prefix}'
host='mipsmavenel-ucb-elf'
host_alias='maven'
host_cpu='mipsmavenel'
host_os='elf'
host_vendor='ucb'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mcppbs_include_external=''
mcppbs_include_external_en=''
mcppbs_include_internal='ubmark '
mcppbs_include_internal_en='ubmark '
mcppbs_install=''
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
stow=''
sysconfdir='${prefix}/etc'
target_alias=''
ubmark_cppflags='-I../ubmark '
ubmark_extra_cppflags=''
ubmark_extra_ldflags=''
ubmark_extra_libs=''
ubmark_intdeps=''
ubmark_ldflags=''
ubmark_libs='-lubmark '
ubmark_pkcdeps=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "ECE4750 Microbenchmark Suite"
#define PACKAGE_TARNAME "ubmark"
#define PACKAGE_VERSION "?"
#define PACKAGE_STRING "ECE4750 Microbenchmark Suite ?"
#define PACKAGE_BUGREPORT "Ji Kim"
#define PACKAGE_URL ""
#define HAVE_UBMARK /**/

configure: exit 0

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by ECE4750 Microbenchmark Suite config.status ?, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on viper.zoo.cs.yale.edu

config.status:817: creating ubmark.mk
config.status:817: creating Makefile
config.status:817: creating ubmark-config.h
config.status:977: ubmark-config.h is unchanged
